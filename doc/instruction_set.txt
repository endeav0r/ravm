OP_ADD
ADD RD, RS
RD = RD + RS
|0x01|RD|RS|

OP_SUB
SUB RD, RS
RD = RD - RS
|0x02|RD|RS|

OP_MUL
MUL RD, RS
RD = RD * RS
|0x03|RD|RS|

OP_DIV
DIV RD, RS
RD = RD / RS
|0x04|RD|RS|

OP_MOD
MOD RD, RS
RD = RD % RS
|0x05|RD|RS|

OP_ADDC
ADD RD, CONSTANT
RD = RD + CONSTANT
|0x06|RD|CO|NS|TA|NT|

OP_ANDR
AND RD, RS
RD = RD & RS
|0x07|RD|RS|

OP_ANDC
AND RD, CONSTANT
RD = RD & CONSTANT
|0x08|RD|CONSTANT|

OP_ORR
OR RD, RS
RD = RS | RS
|0x09|RD|RS|

OP_ORC
OR RD, CONSTANT
RD = RD | CONSTANT
|0x0A|RD|CONSTANT|

OP_XORR
XOR RD, RS
RD = RS ^ RD
|0x0B|RD|RS|

OP_XORC
XOR RD, CONSTANT
|0x0C|RD|CONSTANT|

OP_MOVC // MovConstant
MOV RD, CONSTANT
RD = CONSTANT
|0x10|RD|CO|NS|TA|NT|

OP_MOVR // MovRegister
MOV RD, RS
RD = RS
|0x11|RD|RS|

OP_MOVL // MovLoad
MOV RD, [RS]
RD = Memory(RS)
|0x12|RD|RS|

OP_MOVS // MovStore
MOV [RD], RS
Memory(RD) = RS
|0x13|RD|RS|

OP_JMP
JMP CONSTANT
IP += CONSTANT
|0x20|CO|NS|TA|NT|

OP_JZ
JZ CONSTANT
if (FLAGS == 0) IP += CONSTANT
|0x21|CO|NS|TA|NT|

OP_JE
JE CONSTANT
if (FLAGS == 0) IP += CONSTANT
|0x22|CO|NS|TA|NT|

OP_JG
JZ CONSTANT
if (FLAGS > 0) IP += CONSTANT
|0x23|CO|NS|TA|NT|

OP_CALL
CALL CONSTANT
push IP, IP += CONSTANT
|0x30|CO|NS|TA|NT|

OP_RET
RET
pop IP
|0x31|

OP_PUSH
PUSH RS
MOV [SP], RS; SP -= 1
|0x32|RS|

OP_POP
POP RS
SP += 1; MOV RS, [SP]
|0x33|RS|

OP_CMPR
CMP RA, RB
FLAGS = RA - RB
|0x40|RA|RB|

OP_CMPC
CMP RD, CONSTANT
FLAGS = RD - CONSTANT
|0x40|RD|CO|NS|TA|NT|

OP_HLT
HLT
VM returns
|0x80|

OP_NOP
NOP
do nothing
|0x90|
